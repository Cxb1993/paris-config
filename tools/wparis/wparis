#!/usr/bin/awk -f

# a wrapper to PARIS
# Supports:
#  #include "file"

# Usage:
# wparis <number of processors> <template file>

# TEST: wparis.t0
# ./wparis -v dry_run=1 3 test_data/input.one.w
# cp input input.out.f90

function init() {
    fmt_run = "mpiexec -np %d paris" # how to run paris (% is a number
				     # of processors)
    stderr = "cat 1>&2"
}

function usage() {
    print "Usage: wparis <number of processor> <template file>" | \
	stderr
}

function msg(s)  { printf "(wparis) %s\n", s | stderr }
function die (s) { msg(s); usage(); exit(1) }

function sys(e) {
    msg(e)
    return system(e)
}

function read(f,   sep, line, cont) { # return a content of file as a
				      # string
    while (getline line < f > 0) {
	if (includep(line)) line = read(INC_FILE)
	cont = cont sep line
	sep = "\n"
    }
    return cont
}

function includep(line) { # is it a #include "FILE"? Sets `INC_FILE'
    sub(line, /!.*/, "") # skip fortran comments
    if (line ~ /^#include/) { # generate file name
	sub(/^#include/, "", line) # cut #include
	sub(/^[\t ]*"/, "", line)   # cut spaces befor "
	sub(/"[\t ]*/, "", line)    # cut spaces  after "
	INC_FILE = line
	msg("include " INC_FILE)
	return 1
    }
    return 0
}

function write() {
    msg("creating input")
    print  f > "input"
}

function req_int(n) { # should be an integer?
    if (n ~ /^[0-9]+$/) return
    die("expecting an integer")
}

BEGIN {
    init()
    if (ARGC != 3) die("takes two arguments")

    np = ARGV[1]; req_int(np)
    templ = ARGV[2]

    f = read(templ)
    write()

    cmd = sprintf(fmt_run, np)
    if (!dry_run) sys(cmd)
}
